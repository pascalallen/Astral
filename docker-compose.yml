# Workaround to create a database volume in BitBucket pipeline test
x-custom:
  volumes:
    - &dbdata ${BITBUCKET_CLONE_DIR:-dbdata}:/var/lib/mysql

services:
  astral-proxy:
    build:
      context: ./etc/proxy
    container_name: astral-proxy
    logging:
      driver: none
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - astral_net

  astral-nginx:
    build:
      context: ./etc/nginx
    container_name: astral-nginx
    ports:
      - "80"
    env_file:
      - ./etc/nginx/nginx.env
    volumes:
      - .:/var/www/app:cached
    networks:
      astral_net:
        aliases:
          - local.astral.com

  astral-fpm:
    build:
      context: ./etc/fpm
    container_name: astral-fpm
    volumes:
      - .:/var/www/app:cached
    networks:
      - astral_net

  astral-db:
    build:
      context: ./etc/db
    platform: linux/amd64
    container_name: astral-db
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - *dbdata # dbdata:/var/lib/mysql
    networks:
      - astral_net

  adminer:
    image: adminer:4-standalone
    container_name: astral-adminer
    restart: always
    ports:
      - "8888:8080"
    networks:
      - astral_net

networks:
  astral_net:
    driver: bridge

volumes:
  dbdata:
    driver: local
